#!/bin/bash

export CONSUL_IMAGE=${CONSUL_IMAGE:="progrium/consul"}
export CADVISOR_IMAGE=${CADVISOR_IMAGE:="google/cadvisor"}
export AMBASSADORD_IMAGE=${AMBASSADORD_IMAGE:="progrium/ambassadord"}
export REGISTRATOR_IMAGE=${REGISTRATOR_IMAGE:="progrium/registrator"}

export CONSUL_NAME=${CONSUL_NAME:="consul"}
export CADVISOR_NAME=${CADVISOR_NAME:="cadvisor"}
export AMBASSADOR_NAME=${AMBASSADOR_NAME:="backends"}
export REGISTRATOR_NAME=${REGISTRATOR_NAME:="registrator"}

export CADVISOR_PORT=${CADVISOR_PORT:=8080}
export CONSUL_RPC_PORT=${CONSUL_RPC_PORT:=8400}
export CONSUL_HTTP_PORT=${CONSUL_HTTP_PORT:=8500}
export CONSUL_EXPECT=${CONSUL_EXPECT:=3}
export CONSUL_DATA=${CONSUL_DATA:=/mnt/consul}

check-environment() {
  if [ -z $HOSTNAME ]; then
    >&2 echo "HOSTNAME variable needed"
    exit 1
  fi
  if [ -z $PRIVATE_IP ]; then
    >&2 echo "PRIVATE_IP variable needed"
    exit 1
  fi
}

check-running(){
  checkfor="$1"; shift
  running=$(docker ps | grep $checkfor)
  if [ -n "$running" ]; then
    >&2 echo "$1 is already running"
    exit 1
  fi
}

cmd-setup() {
  local opts="DOCKER_OPTS='--dns 172.17.42.1 --dns 8.8.8.8 --dns-search service.consul'"
  local file=/etc/default/docker
  local exists=$(cat $file | grep "$opts")
  if [ -n "$exists" ]; then
    >&2 echo "DOCKER_OPTS already set"
    exit 1
  fi
  echo $opts >> $file
  mkdir -p $CONSUL_DATA
  sudo service docker restart
}

cmd-consul() {
  local servicename="$CONSUL_NAME"
  check-running $servicename
  local mode="$1"; shift
  local arg="$1"
  local args="$@"
  bridge_ip=$(ip ro | awk '/^default/{print $3}')
  consul_args=""

  if [[ -z $mode ]]; then
    >&2 echo "usage: envoy consul boot|server|client [CONSUL_EXPECT|JOIN_IP] [CONSUL_ARGS..]"
    exit 1
  fi

  if [[ "$mode" == "boot" ]]; then
    if ! [[ $arg =~ ^[0-9]+$ ]]; then
      args="$CONSUL_EXPECT $args"
    fi
    consul_args="-server -bootstrap-expect $args"
  elif [[ "$mode" == "server" ]]; then
    if [[ -z $arg ]]; then
      >&2 echo "server mode needs a JOIN_IP"
      exit 1
    fi
    consul_args="-server -join $args"
  elif [[ "$mode" == "client" ]]; then
    if [[ -z $args ]]; then
      >&2 echo "client mode needs a JOIN_IP"
      exit 1
    fi
    consul_args="-join $args"
  else
    >&2 echo "unknown mode: $mode"
    exit 1
  fi
  echo $consul_args
  docker run -d --name $servicename -h $HOSTNAME \
    -v $CONSUL_DATA:/data \
    -p $PRIVATE_IP:8300:8300 \
    -p $PRIVATE_IP:8301:8301 \
    -p $PRIVATE_IP:8301:8301/udp \
    -p $PRIVATE_IP:8302:8302 \
    -p $PRIVATE_IP:8302:8302/udp \
    -p $PRIVATE_IP:$CONSUL_RPC_PORT:8400 \
    -p $PRIVATE_IP:$CONSUL_HTTP_PORT:8500 \
    -p $bridge_ip:53:53/udp \
    $CONSUL_IMAGE -advertise $PRIVATE_IP $consul_args
}

registrator() {
  local servicename="$REGISTRATOR_NAME"
  check-running $servicename
  docker run -d \
    --name "$servicename" \
    -v /var/run/docker.sock:/tmp/docker.sock \
    -h $HOSTNAME $REGISTRATOR_IMAGE -ip=$PRIVATE_IP consul://$PRIVATE_IP:$CONSUL_HTTP_PORT
}

ambassadord(){
  local servicename="$AMBASSADOR_NAME"
  check-running $servicename
  docker run -d \
    --name "$servicename" \
    -v /var/run/docker.sock:/var/run/docker.sock \
    $AMBASSADORD_IMAGE --omnimode

  docker run --rm \
    --privileged \
    --net container:"$AMBASSADOR_NAME" \
    $AMBASSADORD_IMAGE --setup-iptables
}

cadvisor(){
  local servicename="$CADVISOR_NAME"
  check-running $servicename
  docker run -d \
    --name "$servicename" \
    -e "SERVICE_8080_NAME=$CADVISOR_NAME" \
    -v /var/run:/var/run:rw \
    -v /sys:/sys:ro \
    -v /var/lib/docker/:/var/lib/docker:ro \
    -p $PRIVATE_IP:$CADVISOR_PORT:8080 $CADVISOR_IMAGE
}

cmd-start() {
  registrator
  sleep 1
  ambassadord
  sleep 1
  cadvisor
  sleep 1
}

stop-service() {
  echo "stop"
  docker stop $1
  echo "remove"
  docker rm $1
}

cmd-stop() {
  stop-service "$CONSUL_NAME"
  stop-service "$REGISTRATOR_NAME"
  stop-service "$AMBASSADOR_NAME"
  stop-service "$CADVISOR_NAME"
}

cmd-pull() {
  docker pull $CONSUL_IMAGE
  sleep 1
  docker pull $CADVISOR_IMAGE
  sleep 1
  docker pull $AMBASSADORD_IMAGE
  sleep 1
  docker pull $REGISTRATOR_IMAGE
}

main() {
  check-environment
  case "$1" in
  setup) shift; cmd-setup $@;;
  consul) shift; cmd-consul $@;;
  start) shift; cmd-start $@;;
  stop) shift; cmd-stop $@;;
  pull) shift; cmd-pull $@;;
  esac
}

main "$@"